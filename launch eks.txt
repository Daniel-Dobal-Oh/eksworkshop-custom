# PREREQUISITES
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv -v /tmp/eksctl /usr/local/bin
eksctl version

# LAUNCH EKS
aws sts get-caller-identity

eksctl completion bash >> ~/.bash_completion
. /etc/profile.d/bash_completion.sh
. ~/.bash_completion

cat << EOF > eksworkshop.yaml
---
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: eksworkshop-eksctl
  region: ${AWS_REGION}
  version: "1.21"

vpc:
  id: "${VPC_ID}"  # (optional, must match VPC ID used for each subnet below)
  cidr: "${VPC_CIDR}"       # (optional, must match CIDR used by the given VPC)
  subnets:
    # must provide 'private' and/or 'public' subnets by availibility zone as shown
    private:
      ap-northeast-2a:
        id: "${SUBNET_IDS[0]}"
        cidr: "${SUBNET_CIDRS[0]}" # (optional, must match CIDR used by the given subnet)

      ap-northeast-2b:
        id: "${SUBNET_IDS[1]}"
        cidr: "${SUBNET_CIDRS[1]}"  # (optional, must match CIDR used by the given subnet)

      ap-northeast-2c:
        id: "${SUBNET_IDS[2]}"
        cidr: "${SUBNET_CIDRS[2]}"   # (optional, must match CIDR used by the given subnet)
      
      ap-northeast-2d:
        id: "${SUBNET_IDS[3]}"
        cidr: "${SUBNET_CIDRS[3]}"   # (optional, must match CIDR used by the given subnet)

# “Security group for pod“ 진행을 위해 m5.large로 생성
managedNodeGroups:
- name: nodegroup
  desiredCapacity: 4
  privateNetworking: true
  instanceType: m5.large
  ssh:
    enableSsm: true

# To enable all of the control plane logs, uncomment below:
# cloudWatch:
#  clusterLogging:
#    enableTypes: ["*"]

secretsEncryption:
  keyARN: ${MASTER_ARN}
EOF

eksctl create cluster -f eksworkshop.yaml


# TEST THE CLUSTER
kubectl get nodes # if we see our 4 nodes, we know we have authenticated correctly

aws eks update-kubeconfig --name eksworkshop-eksctl --region ${AWS_REGION}

STACK_NAME=$(eksctl get nodegroup --cluster eksworkshop-eksctl -o json | jq -r '.[].StackName')
ROLE_NAME=$(aws cloudformation describe-stack-resources --stack-name $STACK_NAME | jq -r '.StackResources[] | select(.ResourceType=="AWS::IAM::Role") | .PhysicalResourceId')
echo "export ROLE_NAME=${ROLE_NAME}" | tee -a ~/.bash_profile

# CONSOLE CREDENTIALS
c9builder=$(aws cloud9 describe-environment-memberships --environment-id=$C9_PID | jq -r '.memberships[].userArn')
if echo ${c9builder} | grep -q user; then
	rolearn=${c9builder}
        echo Role ARN: ${rolearn}
elif echo ${c9builder} | grep -q assumed-role; then
        assumedrolename=$(echo ${c9builder} | awk -F/ '{print $(NF-1)}')
        rolearn=$(aws iam get-role --role-name ${assumedrolename} --query Role.Arn --output text) 
        echo Role ARN: ${rolearn}
fi

eksctl create iamidentitymapping --cluster eksworkshop-eksctl --arn ${rolearn} --group system:masters --username admin

kubectl describe configmap -n kube-system aws-auth
