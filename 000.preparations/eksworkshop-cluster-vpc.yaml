AWSTemplateFormatVersion: '2010-09-09'
Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: eksworkshop
  ControlPlaneName:
    Description: An eks cluster name
    Type: String
    Default: ekscluster-custom
  EKSServiceRoleName:
    Type: String
    Default: EKSServiceRole
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.22.0.0/16
  WebSubnetACidr:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.22.0.0/28
  WebSubnetBCidr:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.22.0.16/28
  WorkerNodeSubnetACidr:
    Description: Please enter the IP range (CIDR notation) for eks worker node zone-a in the first Availability Zone
    Type: String
    Default: 10.22.2.0/28
  WorkerNodeSubnetBCidr:
    Description: Please enter the IP range (CIDR notation) for eks worker node zone-b in the second Availability Zone
    Type: String
    Default: 10.22.2.16/28
  WorkerNodeSubnetCCidr:
    Description: Please enter the IP range (CIDR notation) for eks worker node zone-c in the second Availability Zone
    Type: String
    Default: 10.22.2.32/28
  WorkerNodeSubnetDCidr:
    Description: Please enter the IP range (CIDR notation) for eks worker node zone-d in the second Availability Zone
    Type: String
    Default: 10.22.2.48/28
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  WebSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref WebSubnetACidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Web Subnet (AZ1)
  WebSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref WebSubnetBCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Web Subnet (AZ2)
  WorkerNodeSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref WorkerNodeSubnetACidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} EKS Worker Node Subnet (AZ1)
  WorkerNodeSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref WorkerNodeSubnetBCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} EKS Worker Node Subnet (AZ2)
  WorkerNodeSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Ref WorkerNodeSubnetCCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} EKS Worker Node Subnet (AZ3)
  WorkerNodeSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [3, !GetAZs '']
      CidrBlock: !Ref WorkerNodeSubnetDCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} EKS Worker Node Subnet (AZ4)
  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref WebSubnetA
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref WebSubnetB
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Web Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  WebSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref WebSubnetA
  WebSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref WebSubnetB
  WorkerNodeSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} EKS Worker Node Routes (AZ1)
  WorkerNodeSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WorkerNodeSubnetARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
  WorkerNodeSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WorkerNodeSubnetARouteTable
      SubnetId: !Ref WorkerNodeSubnetA
  WorkerNodeSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} EKS Worker Node Routes (AZ2)
  WorkerNodeSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WorkerNodeSubnetBRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
  WorkerNodeSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WorkerNodeSubnetBRouteTable
      SubnetId: !Ref WorkerNodeSubnetB
  WorkerNodeSubnetCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} EKS Worker Node Routes (AZ3)
  WorkerNodeSubnetCRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WorkerNodeSubnetCRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
  WorkerNodeSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WorkerNodeSubnetCRouteTable
      SubnetId: !Ref WorkerNodeSubnetC
  WorkerNodeSubnetDRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} EKS Worker Node Routes (AZ4)
  WorkerNodeSubnetDRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WorkerNodeSubnetDRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
  WorkerNodeSubnetDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WorkerNodeSubnetDRouteTable
      SubnetId: !Ref WorkerNodeSubnetD
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
  Cloud9InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'eksworkshop-admin'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
  Cloud9InstanceRoleProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      InstanceProfileName: 'eksworkshop-admin'
      Path: "/"
      Roles: 
        - 
          !Ref Cloud9InstanceRole
  Cloud9Instance:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      AutomaticStopTimeMinutes: 1440
      Description: Cloud9 Instance for eksworkshop
      ImageId: amazonlinux-2-x86_64
      InstanceType: m5.large
      Name: eksworkshop-instance
      SubnetId: !Ref WebSubnetA
  EKSWorkerNodeKeyPair:
    Type: AWS::EC2::KeyPair
    Properties: 
      KeyName: EKSWorkerNodeKeyPair
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} nodegroup key pair
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC
  ControlPlaneRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: !Ref EKSServiceRoleName
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
  SecretsEncryptionKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: "Encryption Key for eks secrets encryption"
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Key
  SecretsEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/eksworkshop
      TargetKeyId: !Ref SecretsEncryptionKey
  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ControlPlaneName
      RoleArn: 
        !GetAtt "ControlPlaneRole.Arn"
      EncryptionConfig:
        - Provider: 
            KeyArn: !GetAtt "SecretsEncryptionKey.Arn"
          Resources: 
          - secrets
      ResourcesVpcConfig:
        SecurityGroupIds:
        - !Ref ControlPlaneSecurityGroup
        SubnetIds:
        - !Ref WorkerNodeSubnetA
        - !Ref WorkerNodeSubnetB
        - !Ref WorkerNodeSubnetC
        - !Ref WorkerNodeSubnetD
    DependsOn: [VPC, WorkerNodeSubnetA, WorkerNodeSubnetB, WorkerNodeSubnetC, WorkerNodeSubnetD, ControlPlaneRole, ControlPlaneSecurityGroup, SecretsEncryptionKey, SecretsEncryptionKeyAlias]
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
  VPCCidr:
    Value: !GetAtt 'VPC.CidrBlock'
  WebSubnets:
    Description: A list of the web subnets
    Value: !Join [ ",", [ !Ref WebSubnetA, !Ref WebSubnetB ]]
  WebSubnetA:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref WebSubnetA
  WebSubnetB:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref WebSubnetB
  WorkerNodeSubnetA:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref WorkerNodeSubnetA
  WorkerNodeSubnetACidr:
    Value: !GetAtt 'WorkerNodeSubnetA.CidrBlock'
  WorkerNodeSubnetB:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref WorkerNodeSubnetB
  WorkerNodeSubnetBCidr:
    Value: !GetAtt 'WorkerNodeSubnetB.CidrBlock'
  WorkerNodeSubnetC:
    Description: A reference to the private subnet in the 3rd Availability Zone
    Value: !Ref WorkerNodeSubnetC
  WorkerNodeSubnetCCidr:
    Value: !GetAtt 'WorkerNodeSubnetC.CidrBlock'
  WorkerNodeSubnetD:
    Description: A reference to the private subnet in the 4th Availability Zone
    Value: !Ref WorkerNodeSubnetD
  WorkerNodeSubnetDCidr:
    Value: !GetAtt 'WorkerNodeSubnetD.CidrBlock'
  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
  SecretsEncryptionKeyArn:
    Description: Encryption Key for eks secrets
    Value: !GetAtt 'SecretsEncryptionKey.Arn'
  Cloud9InstanceRole:
    Description: IAM Role for cloud9
    Value: !Ref Cloud9InstanceRole
  Cloud9InstanceRoleProfile:
    Description: IAM Role Profile for cloud9 Instance
    Value: !GetAtt 'Cloud9InstanceRoleProfile.Arn'
  Cloud9Instance:
    Value: !Ref Cloud9Instance
  Cloud9InstanceArn:
    Value: !GetAtt 'Cloud9Instance.Arn'
  EKSWorkerNodeKeyPair:
    Value: !Ref EKSWorkerNodeKeyPair
  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]